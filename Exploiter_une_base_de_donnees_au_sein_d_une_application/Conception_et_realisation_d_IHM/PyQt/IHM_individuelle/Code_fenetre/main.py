from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtSql import QSqlDatabase, QSqlRelationalTableModel, QSqlQuery
import sys, os, Bar



class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 900)
        MainWindow.setWindowFlags(QtCore.Qt.CustomizeWindowHint | QtCore.Qt.FramelessWindowHint)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.main_layout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.main_layout.setObjectName("main_layout")

        self.main_layout.addWidget(Bar.MyBar(MainWindow))
        self.main_layout.setContentsMargins(0,0,0,0)

        self.app_manage_layout = QtWidgets.QHBoxLayout()
        self.app_manage_layout.setObjectName("app_manage_layout")

        self.separator = QtWidgets.QFrame()
        self.separator.setFrameShape(QtWidgets.QFrame.HLine)
        self.separator.setLineWidth(5)
        self.separator.setStyleSheet("color : rgba(243, 67, 105, 255);")
        self.main_layout.addWidget(self.separator)

        self.open_but = QtWidgets.QPushButton(self.centralwidget)
        self.open_but.setObjectName("open_but")
        self.open_but.setIcon(QtGui.QIcon("Assets:Open.png"))
        self.app_manage_layout.addWidget(self.open_but)
        self.app_manage_layout.addItem(spacerItem)

        self.table_select_icon = QtWidgets.QLabel(self.centralwidget)
        self.table_select_icon.setObjectName("table_select_icon")
        self.table_select_icon.setPixmap(QtGui.QPixmap("Assets:table.png").scaledToWidth(32))
        self.app_manage_layout.addWidget(self.table_select_icon)
        self.table_select_label = QtWidgets.QLabel(self.centralwidget)
        self.table_select_label.setObjectName("table_select_label")
        self.app_manage_layout.addWidget(self.table_select_label)
        self.table_select_box = QtWidgets.QComboBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        self.table_select_box.setSizePolicy(sizePolicy)
        self.table_select_box.setObjectName("table_select_box")
        self.app_manage_layout.addWidget(self.table_select_box)
        self.app_manage_layout.addItem(spacerItem)

        self.filter_icon = QtWidgets.QLabel(self.centralwidget)
        self.filter_icon.setObjectName("filter_icon")
        self.filter_icon.setPixmap(QtGui.QPixmap("Assets:filtre.png").scaledToWidth(32))
        self.app_manage_layout.addWidget(self.filter_icon)
        
        self.filtre_label = QtWidgets.QLabel(self.centralwidget)
        self.filtre_label.setObjectName("filtre_label")
        self.app_manage_layout.addWidget(self.filtre_label)
        self.filtre_col_box = QtWidgets.QComboBox(self.centralwidget)
        self.filtre_col_box.setObjectName("filtre_col_box")
        self.filtre_col_box.setSizePolicy(sizePolicy)
        self.app_manage_layout.addWidget(self.filtre_col_box)
        self.filtre_arg_box = QtWidgets.QComboBox(self.centralwidget)
        self.filtre_arg_box.setObjectName("filtre_arg_box")
        self.app_manage_layout.addWidget(self.filtre_arg_box)
        self.filtre_parameter_edit = QtWidgets.QLineEdit(self.centralwidget)
        self.filtre_parameter_edit.setObjectName("filtre_parameter_edit")
        self.app_manage_layout.addWidget(self.filtre_parameter_edit)
        self.filtre_apply_but = QtWidgets.QPushButton(self.centralwidget)
        self.filtre_apply_but.setObjectName("filtre_apply_but")
        self.app_manage_layout.addWidget(self.filtre_apply_but)

        self.filtre_reset_but = QtWidgets.QPushButton(self.centralwidget)
        self.filtre_reset_but.setObjectName("filtre_reset_but")
        self.app_manage_layout.addWidget(self.filtre_reset_but)

        self.app_manage_layout.setContentsMargins(5,0,5,0)
        self.main_layout.addLayout(self.app_manage_layout)

        self.separator_2 = QtWidgets.QFrame()
        self.separator_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.separator_2.setLineWidth(5)
        self.separator_2.setStyleSheet("color : rgba(63, 59, 146, 255);")
        self.main_layout.addWidget(self.separator_2)


        self.render_layout = QtWidgets.QHBoxLayout()
        self.render_layout.setObjectName("render_layout")
        self.render_view = QtWidgets.QTableView(self.centralwidget)
        self.render_view.setObjectName("render_view")
        self.render_layout.addWidget(self.render_view)
        self.render_text_layout = QtWidgets.QVBoxLayout()
        self.render_text_layout.setObjectName("render_text_layout")

        self.value_frame = QtWidgets.QFrame()
        self.value_frame.setFrameShape(QtWidgets.QFrame.Box)
        self.value_frame.setLineWidth(2)
        self.value_frame.setStyleSheet("QFrame{color : rgba(243, 67, 105, 255);}")

        self.value_layout = QtWidgets.QVBoxLayout(self.value_frame)
        self.value_layout.setObjectName("value_layout")

        self.value_label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        self.value_label.setSizePolicy(sizePolicy)
        self.value_label.setAlignment(QtCore.Qt.AlignCenter)
        self.value_label.setObjectName("value_label")
        self.value_layout.addWidget(self.value_label)
        self.value_edit = QtWidgets.QTextEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        self.value_edit.setSizePolicy(sizePolicy)
        self.value_edit.setObjectName("value_edit")
        self.value_layout.addWidget(self.value_edit)
        self.apply_value_but = QtWidgets.QPushButton(self.centralwidget)
        self.apply_value_but.setObjectName("apply_value_but")
        self.value_layout.addWidget(self.apply_value_but)

        self.render_text_layout.addWidget(self.value_frame)

        self.query_frame = QtWidgets.QFrame()
        self.query_frame.setFrameShape(QtWidgets.QFrame.Box)
        self.query_frame.setLineWidth(2)
        self.query_frame.setStyleSheet("QFrame{color : rgba(63, 59, 146, 255);}")

        self.query_layout = QtWidgets.QVBoxLayout(self.query_frame)
        self.query_layout.setObjectName("query_layout")

        self.query_label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        self.query_label.setSizePolicy(sizePolicy)
        self.query_label.setAlignment(QtCore.Qt.AlignCenter)
        self.query_label.setObjectName("query_label")
        self.query_layout.addWidget(self.query_label)
        self.query_edit = QtWidgets.QTextEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        self.query_edit.setSizePolicy(sizePolicy)
        self.query_edit.setObjectName("query_edit")
        self.query_layout.addWidget(self.query_edit)
        self.apply_query_but = QtWidgets.QPushButton(self.centralwidget)
        self.apply_query_but.setObjectName("apply_query_but")

        self.query_layout.addWidget(self.apply_query_but)
        self.render_text_layout.addWidget(self.query_frame)
        self.render_layout.addLayout(self.render_text_layout)

        self.render_layout.setContentsMargins(5,0,5,5)
        self.main_layout.addLayout(self.render_layout)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

############################### Connexion #################################
        self.open_but.clicked.connect(lambda : self.open(MainWindow))
        self.table_select_box.currentIndexChanged.connect(self.set_table)
        self.render_view.clicked.connect(self.show_sel)
        self.apply_value_but.clicked.connect(self.update_db)
        self.apply_query_but.clicked.connect(self.execute_query)
        self.filtre_apply_but.clicked.connect(self.filtre_query)
        self.filtre_reset_but.clicked.connect(self.reset_query)

############################### Buttons param ##############################
        self.filtre_arg_box.addItems(["=", "!=", "<", "<=", ">", ">=", "Contient"])
        self.table_select_box.setEnabled(False)
        self.filtre_apply_but.setEnabled(False)
        self.filtre_col_box.setEnabled(False)
        self.filtre_arg_box.setEnabled(False)
        self.filtre_parameter_edit.setEnabled(False)
        self.filtre_reset_but.setEnabled(False)
        self.value_edit.setEnabled(False)
        self.query_edit.setEnabled(False)
        self.apply_value_but.setEnabled(False)
        self.apply_query_but.setEnabled(False)
        self.apply_value_but.setEnabled(False)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "DB Manager"))
        self.table_select_label.setText(_translate("MainWindow", "Table"))
        self.filtre_label.setText(_translate("MainWindow", "Filtre :"))
        self.filtre_apply_but.setText(_translate("MainWindow", "Appliquer"))
        self.filtre_reset_but.setText(_translate("MainWindow", "Reset"))
        self.value_label.setText(_translate("MainWindow", "Valeur"))
        self.apply_value_but.setText(_translate("MainWindow", "Appliquer"))
        self.query_label.setText(_translate("MainWindow", "RequÃªte SQL"))
        self.apply_query_but.setText(_translate("MainWindow", "Appliquer"))
        self.open_but.setText(_translate("MainWindow", "Ouvrir"))

    def open(self, MainWindow):
        self.table_select_box.setEnabled(False)
        self.filtre_apply_but.setEnabled(False)
        self.filtre_col_box.setEnabled(False)
        self.filtre_arg_box.setEnabled(False)
        self.filtre_parameter_edit.setEnabled(False)
        self.filtre_reset_but.setEnabled(False)
        self.value_edit.setEnabled(False)
        self.query_edit.setEnabled(False)
        self.apply_value_but.setEnabled(False)
        self.apply_query_but.setEnabled(False)
        self.apply_value_but.setEnabled(False)


        self.db = QSqlDatabase.addDatabase('QSQLITE')
        

        self.table_select_box.clear()
        self.render_view.setModel(QSqlRelationalTableModel())
        self.value_edit.clear()
        self.query_edit.clear()
        self.filtre_col_box.clear()

        self.render_view.setSortingEnabled(True)

        self.file, ok = QtWidgets. QFileDialog.getOpenFileName(MainWindow, 'Ouvrir', os.getenv('HOME'), 'Database(*.db)')
        if ok:
            self.db.setDatabaseName(self.file)
            
            if not self.db.open():
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Warning)
                msg.setText(f"Connexion Ã  la base impossible !")
                msg.setWindowTitle("Erreur")
                msg.exec_()
            else:
                self.table_select_box.addItems(self.db.tables())

                self.table_select_box.setEnabled(True)
                self.filtre_apply_but.setEnabled(True)
                self.filtre_col_box.setEnabled(True)
                self.filtre_arg_box.setEnabled(True)
                self.filtre_parameter_edit.setEnabled(True)
                self.filtre_reset_but.setEnabled(True)
                self.value_edit.setEnabled(True)
                self.query_edit.setEnabled(True)
                self.apply_value_but.setEnabled(True)
                self.apply_query_but.setEnabled(True)
                self.apply_value_but.setEnabled(True)
                
    def set_table(self):
        self.model = QSqlRelationalTableModel()
        self.model.setTable(self.table_select_box.currentText())
        self.model.setEditStrategy(QSqlRelationalTableModel.OnFieldChange)
        self.model.select()
        self.render_view.setModel(self.model)

        self.filtre_col_box.clear()
        col_names = []
        for column in range(self.model.columnCount()):
            self.render_view.horizontalHeader().resizeSection(column, self.render_view.horizontalHeader().sectionSizeHint(column))
            item = self.model.record().fieldName(column)
            col_names.append(item)

        self.render_view.horizontalHeader().setStretchLastSection(True)

        self.filtre_col_box.addItems(col_names)
        

    def show_sel(self, sel):
        self.selection = sel
        self.value_edit.setText(str(sel.data()))
    
    def update_db(self):
        self.model.setData(self.selection, self.value_edit.toPlainText())

    def execute_query(self):
        self.model.setQuery(QSqlQuery(self.query_edit.toPlainText()))
        self.render_view.setModel(self.model)

        if self.model.columnCount() == 0:

            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText(f"RÃ©sultat vide")
            msg.setWindowTitle("Erreur")
            msg.exec_()

            self.reset_query()

        self.resize_headers()


    def filtre_query(self):
        table = self.table_select_box.currentText()
        col = self.filtre_col_box.currentText()

        arg = self.filtre_arg_box.currentText()
        arg = 'LIKE' if arg == 'Contient' else arg

        param = self.filtre_parameter_edit.text()
        param = f"'%{param}%'" if not param.isdigit() else param

        self.model.setQuery(QSqlQuery(f"SELECT * FROM {table} WHERE {col} {arg} {param}"))
        self.render_view.setModel(self.model)

        if self.model.columnCount() == 0:

            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText(f"RÃ©sultat vide")
            msg.setWindowTitle("Erreur")
            msg.exec_()

            self.reset_query()

        self.resize_headers()
    
    def reset_query(self):

        self.model.setQuery(QSqlQuery(f" SELECT * FROM {self.table_select_box.currentText()}"))
        self.render_view.setModel(self.model)

    def resize_headers(self):
         
         for column in range(self.model.columnCount()):
            self.render_view.horizontalHeader().resizeSection(column, self.render_view.horizontalHeader().sectionSizeHint(column))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)

    QtCore.QDir.addSearchPath('Assets', os.path.join(os.path.dirname(os.path.abspath(__file__)), 'Assets'))

    app.setWindowIcon(QtGui.QIcon("Assets:Logo.png"))
    file = QtCore.QFile('Assets:Style.qss')
    file.open(QtCore.QFile.ReadOnly | QtCore.QFile.Text)
    app.setStyleSheet(str(file.readAll(), 'utf-8'))

    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

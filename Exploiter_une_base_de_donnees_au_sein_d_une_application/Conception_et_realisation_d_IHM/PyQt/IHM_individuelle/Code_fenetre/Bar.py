from PyQt5 import QtCore, QtGui, QtWidgets

class MyBar(QtWidgets.QWidget):
    def __init__(self, parent):
        super(MyBar, self).__init__()
        self.parent = parent
        self.Barlayout = QtWidgets.QHBoxLayout()
        self.Barlayout.setContentsMargins(0,0,0,0)
        
        self.title = QtWidgets.QLabel("DB Manager")
        
        btn_size = 50

        self.btn_close = QtWidgets.QPushButton("")
        self.btn_close.setIcon(QtGui.QIcon('Assets:close.png'))
        self.btn_close.setIconSize(QtCore.QSize(35, 35))
        self.btn_close.clicked.connect(self.btn_close_clicked)
        self.btn_close.setFixedSize(btn_size,btn_size)
        self.btn_close.setStyleSheet("""
            QPushButton 
            {
                border-width: 5px; 
                border-color: #242526;
            }
            QPushButton::hover
            {
                background-color: #8399ff;
                border-width: 3px;
                border-color: #242526;
            }
            QPushButton::pressed
            {
                background-color: #4969ff;
                border-color: #242526;
            }
        """)

        self.btn_min = QtWidgets.QPushButton("")
        self.btn_min.setIcon(QtGui.QIcon('Assets:min.png'))
        self.btn_min.setIconSize(QtCore.QSize(35, 35))
        self.btn_min.clicked.connect(self.btn_min_clicked)
        self.btn_min.setFixedSize(btn_size, btn_size)
        self.btn_min.setStyleSheet("""
            QPushButton 
            {
                border-width: 5px; 
                border-color: #242526;
            }
            QPushButton::hover
            {
                background-color: #8399ff;
                border-width: 3px;
                border-color: #242526;
            }
            QPushButton::pressed
            {
                background-color: #4969ff;
                border-color: #242526;
            }
        """)
        

        self.btn_max = QtWidgets.QPushButton("")
        self.btn_max.setIcon(QtGui.QIcon('Assets:max.png'))
        self.btn_max.setIconSize(QtCore.QSize(35, 35))
        self.btn_max.clicked.connect(self.btn_max_clicked)
        self.btn_max.setFixedSize(btn_size, btn_size)
        self.btn_max.setStyleSheet("""
            QPushButton 
            {
                border-width: 5px; 
                border-color: #242526;
            }
            QPushButton::hover
            {
                background-color: #8399ff;
                border-width: 3px;
                border-color: #242526;
            }
            QPushButton::pressed
            {
                background-color: #4969ff;
                border-color: #242526;
            }
        """)

        self.title.setFixedHeight(50)
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        self.Barlayout.addWidget(self.title)
        self.Barlayout.addWidget(self.btn_min)
        self.Barlayout.addWidget(self.btn_max)
        self.Barlayout.addWidget(self.btn_close)

        self.title.setStyleSheet("""
            background-color: #242526;
            color: white;
            font-weight: bold;
            font-family : Trebuchet MS;
            font-size : 40px;
        """)
        self.setLayout(self.Barlayout)
        self.start = QtCore.QPoint(0, 0)
        self.pressing = False
        self.title.mouseMoveEvent = self.mouseMoveEvent
        self.title.mousePressEvent = self.mousePressEvent
        self.title.mouseReleaseEvent = self.mouseReleaseEvent

        self.icon = QtWidgets.QLabel(self.parent)
        self.icon.setPixmap(QtGui.QPixmap("Assets:Logo.png").scaledToHeight(40, QtCore.Qt.SmoothTransformation))
        self.icon.setContentsMargins(5, 5, 0 , 5)
        self.icon.setGeometry(QtCore.QRect(0, 0, 160, 50))
        self.icon.setStyleSheet("background-color: #242526;")
        self.icon.mouseMoveEvent = self.mouseMoveEvent
        self.icon.mousePressEvent = self.mousePressEvent
        self.icon.mouseReleaseEvent = self.mouseReleaseEvent

    def resizeEvent(self, QResizeEvent):
        super(MyBar, self).resizeEvent(QResizeEvent)
        self.title.resize(self.parent.width(), self.parent.height())

    def mousePressEvent(self, event):
        if event.buttons() == QtCore.Qt.LeftButton:
            self.start = self.mapToGlobal(event.pos())
            self.pressing = True
            
    def mouseMoveEvent(self, event):
        if self.pressing:
            if self.parent.isFullScreen():
                self.parent.showNormal()
                self.btn_max.setIcon(QtGui.QIcon('Assets:max.png'))
                self.parent.move(QtGui.QCursor.pos().x() - self.parent.width() // 2, 0)
                

            else :
                self.end = self.mapToGlobal(event.pos())
                self.movement = self.end-self.start
                self.parent.setGeometry(self.mapToGlobal(self.movement).x(),
                                    self.mapToGlobal(self.movement).y(),
                                    self.parent.width(),
                                    self.parent.height())
                self.start = self.end

    def mouseReleaseEvent(self, QMouseEvent):
        self.pressing = False
        if self.parent.pos().y() < 0:
            self.parent.move(self.parent.pos().x(), 0)
            self.parent.showFullScreen()
            self.btn_max.setIcon(QtGui.QIcon('Assets:max_inv.png'))


    def btn_close_clicked(self):
        self.parent.close()

    def btn_max_clicked(self):
        if self.parent.isFullScreen():
            self.parent.showNormal()
            self.btn_max.setIcon(QtGui.QIcon('Assets:max.png'))
        else:
            self.parent.showFullScreen()
            self.btn_max.setIcon(QtGui.QIcon('Assets:max_inv.png'))
        
    def btn_min_clicked(self):
        self.parent.showMinimized()
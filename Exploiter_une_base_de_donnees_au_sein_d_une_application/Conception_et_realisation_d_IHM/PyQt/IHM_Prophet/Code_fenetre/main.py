from PyQt5 import QtCore, QtGui, QtWidgets
import os, sys, Bar, PdModel
import pandas as pd
from prophet import Prophet
from Pred_Thread import ProThread

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(900, 900)
        MainWindow.setWindowFlags(QtCore.Qt.CustomizeWindowHint | QtCore.Qt.FramelessWindowHint)
        

        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.main_layout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.main_layout.setObjectName("main_layout")

        self.main_layout.addWidget(Bar.MyBar(MainWindow))
        self.main_layout.setContentsMargins(0,0,0,0)

        self.pages = QtWidgets.QStackedWidget(self.centralwidget)
        self.pages.setObjectName("pages")


        self.preproc_page = QtWidgets.QWidget()
        self.preproc_page.setObjectName("preproc_page")

        self.preproc_page_layout = QtWidgets.QVBoxLayout(self.preproc_page)
        self.preproc_page_layout.setObjectName("preproc_page_layout")

        self.data_page_title = QtWidgets.QLabel(self.preproc_page)
        self.data_page_title.setSizePolicy(sizePolicy)
        self.data_page_title.setAlignment(QtCore.Qt.AlignCenter)
        self.data_page_title.setObjectName("data_page_title")
        self.data_page_title.setStyleSheet("font-weight: bold; font-family : Trebuchet MS; font-size : 25px;")
        self.preproc_page_layout.addWidget(self.data_page_title)

        self.file_layout = QtWidgets.QHBoxLayout()
        self.file_layout.setObjectName("file_layout")

        self.open_but = QtWidgets.QPushButton(self.preproc_page)
        self.open_but.setObjectName("open_but")
        self.open_but.setIcon(QtGui.QIcon("Assets:open.png"))
        self.file_layout.addWidget(self.open_but)

        self.save_but = QtWidgets.QPushButton(self.preproc_page)
        self.save_but.setObjectName("save_but")
        self.save_but.setIcon(QtGui.QIcon("Assets:save.png"))
        self.file_layout.addWidget(self.save_but)

        self.save_as_but = QtWidgets.QPushButton(self.preproc_page)
        self.save_as_but.setObjectName("save_as_but")
        self.save_as_but.setIcon(QtGui.QIcon("Assets:save_as.png"))
        self.file_layout.addWidget(self.save_as_but)

        self.preproc_page_layout.addLayout(self.file_layout)


        self.Preproc_but_layout = QtWidgets.QHBoxLayout()
        self.Preproc_but_layout.setObjectName("Preproc_but_layout")
        self.Preproc_but_layout.setSpacing(20)

        self.data_sel_label = QtWidgets.QLabel(self.preproc_page)
        self.data_sel_label.setObjectName("data_sel_label")
        self.Preproc_but_layout.addWidget(self.data_sel_label)

        self.col_sel_layout = QtWidgets.QGridLayout()
        self.col_sel_layout.setObjectName("col_sel_layout")

        self.date_col_sel_label = QtWidgets.QLabel(self.preproc_page)
        self.date_col_sel_label.setObjectName("date_col_sel_label")
        self.col_sel_layout.addWidget(self.date_col_sel_label, 0, 0, 1, 1)

        self.date_col_sel_box = QtWidgets.QComboBox(self.preproc_page)
        self.date_col_sel_box.setSizePolicy(sizePolicy)
        self.date_col_sel_box.setObjectName("date_col_sel_box")
        self.date_col_sel_box.setMinimumWidth(150)
        self.col_sel_layout.addWidget(self.date_col_sel_box, 0, 1, 1, 1)

        self.data_col_sel_label = QtWidgets.QLabel(self.preproc_page)
        self.data_col_sel_label.setObjectName("data_col_sel_label")
        self.col_sel_layout.addWidget(self.data_col_sel_label, 1, 0, 1, 1)

        self.data_col_sel_box = QtWidgets.QComboBox(self.preproc_page)

        self.data_col_sel_box.setSizePolicy(sizePolicy)
        self.data_col_sel_box.setObjectName("data_col_sel_box")
        self.data_col_sel_box.setMinimumWidth(150)
        self.col_sel_layout.addWidget(self.data_col_sel_box, 1, 1, 1, 1)

        self.Preproc_but_layout.addLayout(self.col_sel_layout)


        self.create_data_but = QtWidgets.QPushButton(self.preproc_page)
        self.create_data_but.setSizePolicy(sizePolicy)
        self.create_data_but.setObjectName("create_data_but")
        self.Preproc_but_layout.addWidget(self.create_data_but)

        self.Preproc_but_layout.addItem(spacerItem)

        self.missing_values_label = QtWidgets.QLabel(self.preproc_page)
        self.missing_values_label.setObjectName("missing_values_label")
        self.Preproc_but_layout.addWidget(self.missing_values_label)

        self.missing_values_box = QtWidgets.QComboBox(self.preproc_page)
        self.missing_values_box.setObjectName("missing_values_box")
        self.missing_values_box.addItems(["Front Fill", "Back Fill", "Mean Fill"])
        self.Preproc_but_layout.addWidget(self.missing_values_box)

        self.missing_values_but = QtWidgets.QPushButton(self.preproc_page)
        self.missing_values_but.setObjectName("missing_values_but")
        self.Preproc_but_layout.addWidget(self.missing_values_but)

        self.Preproc_but_layout.addItem(spacerItem)

        self.reset_but = QtWidgets.QPushButton(self.preproc_page)
        self.reset_but.setObjectName("reset_but")
        self.Preproc_but_layout.addWidget(self.reset_but)

        self.preproc_page_layout.addLayout(self.Preproc_but_layout)

        self.data_viewer = QtWidgets.QTableView(self.preproc_page)
        self.data_viewer.setSortingEnabled(True)
        self.data_viewer.setObjectName("data_viewer")
        self.data_viewer.setSortingEnabled(True)
        self.preproc_page_layout.addWidget(self.data_viewer)

        self.pred_page_but = QtWidgets.QPushButton(self.preproc_page)
        self.pred_page_but.setObjectName("pred_page_but")
        self.pred_page_but.setIcon(QtGui.QIcon("Assets:pred.png"))
        self.preproc_page_layout.addWidget(self.pred_page_but)

        self.pages.addWidget(self.preproc_page)

        self.pred_page = QtWidgets.QWidget()
        self.pred_page.setObjectName("pred_page")

        self.pred_page_layout = QtWidgets.QVBoxLayout(self.pred_page)
        self.pred_page_layout.setObjectName("pred_page_layout")

        self.pred_page_label = QtWidgets.QLabel(self.pred_page)
        self.pred_page_label.setSizePolicy(sizePolicy)
        self.pred_page_label.setAlignment(QtCore.Qt.AlignCenter)
        self.pred_page_label.setObjectName("pred_page_label")
        self.pred_page_label.setStyleSheet("font-weight: bold; font-family : Trebuchet MS; font-size : 25px;")
        self.pred_page_layout.addWidget(self.pred_page_label)

        self.pred_param_layout = QtWidgets.QHBoxLayout()
        self.pred_param_layout.setObjectName("pred_param_layout")
        self.pred_param_layout.setSpacing(20)

        self.mode_label = QtWidgets.QLabel(self.pred_page)
        self.mode_label.setSizePolicy(sizePolicy)
        self.mode_label.setObjectName("mode_label")
        self.pred_param_layout.addWidget(self.mode_label)

        self.test_radio = QtWidgets.QRadioButton(self.pred_page)
        self.test_radio.setObjectName("test_radio")
        self.test_radio.setChecked(True)
        self.pred_param_layout.addWidget(self.test_radio)

        self.prophecy_radio = QtWidgets.QRadioButton(self.pred_page)
        self.prophecy_radio.setObjectName("prophecy_radio")
        self.pred_param_layout.addWidget(self.prophecy_radio)
        self.pred_param_layout.addItem(spacerItem)

        self.hyper_label = QtWidgets.QLabel(self.pred_page)
        self.hyper_label.setSizePolicy(sizePolicy)
        self.hyper_label.setObjectName("hyper_label")
        self.pred_param_layout.addWidget(self.hyper_label)

        self.hyper_flex_layout = QtWidgets.QGridLayout()
        self.hyper_flex_layout.setObjectName("hyper_flex_layout")

        self.trend_box = QtWidgets.QDoubleSpinBox(self.pred_page)
        self.trend_box.setObjectName("trend_box")
        self.trend_box.setAccelerated(True)
        self.trend_box.setDecimals(3)
        self.trend_box.setRange(0.001, 0.5)
        self.trend_box.setValue(0.05)
        self.trend_box.setStepType(QtWidgets.QAbstractSpinBox.AdaptiveDecimalStepType)
        self.hyper_flex_layout.addWidget(self.trend_box, 0, 1, 1, 1)

        self.saison_label = QtWidgets.QLabel(self.pred_page)
        self.saison_label.setSizePolicy(sizePolicy)
        self.saison_label.setObjectName("saison_label")
        self.hyper_flex_layout.addWidget(self.saison_label, 1, 0, 1, 1)

        self.trend_label = QtWidgets.QLabel(self.pred_page)
        self.trend_label.setSizePolicy(sizePolicy)
        self.trend_label.setObjectName("trend_label")
        self.hyper_flex_layout.addWidget(self.trend_label, 0, 0, 1, 1)

        self.saison_box = QtWidgets.QDoubleSpinBox(self.pred_page)
        self.saison_box.setObjectName("saison_box")
        self.saison_box.setAccelerated(True)
        self.saison_box.setRange(0.01, 10)
        self.saison_box.setValue(10)
        self.saison_box.setStepType(QtWidgets.QAbstractSpinBox.AdaptiveDecimalStepType)
        self.hyper_flex_layout.addWidget(self.saison_box, 1, 1, 1, 1)

        self.holiday_label = QtWidgets.QLabel(self.pred_page)
        self.holiday_label.setSizePolicy(sizePolicy)
        self.holiday_label.setObjectName("holiday_label")
        self.hyper_flex_layout.addWidget(self.holiday_label, 2, 0, 1, 1)

        self.holiday_box = QtWidgets.QDoubleSpinBox(self.pred_page)
        self.holiday_box.setObjectName("holiday_box")
        self.holiday_box.setObjectName("saison_box")
        self.holiday_box.setAccelerated(True)
        self.holiday_box.setRange(0.01, 10)
        self.holiday_box.setValue(10)
        self.holiday_box.setStepType(QtWidgets.QAbstractSpinBox.AdaptiveDecimalStepType)
        self.hyper_flex_layout.addWidget(self.holiday_box, 2, 1, 1, 1)

        self.pred_param_layout.addLayout(self.hyper_flex_layout)

        self.hyper_other_layout = QtWidgets.QGridLayout()
        self.hyper_other_layout.setObjectName("hyper_other_layout")

        self.changepoint_label = QtWidgets.QLabel(self.pred_page)
        self.changepoint_label.setSizePolicy(sizePolicy)
        self.changepoint_label.setObjectName("changepoint_label")
        self.hyper_other_layout.addWidget(self.changepoint_label, 1, 0, 1, 1)

        self.saison_mode_label = QtWidgets.QLabel(self.pred_page)
        self.saison_mode_label.setSizePolicy(sizePolicy)
        self.saison_mode_label.setObjectName("saison_mode_label")
        self.hyper_other_layout.addWidget(self.saison_mode_label, 0, 0, 1, 1)

        self.saison_mode_box = QtWidgets.QComboBox(self.pred_page)
        self.saison_mode_box.setObjectName("saison_mode_box")
        self.saison_mode_box.addItems(['additive', 'multiplicative'])
        self.hyper_other_layout.addWidget(self.saison_mode_box, 0, 1, 1, 1)

        self.changepoint_box = QtWidgets.QSpinBox(self.pred_page)
        self.changepoint_box.setObjectName("changepoint_box")
        self.changepoint_box.setAccelerated(True)
        self.changepoint_box.setRange(80, 95)
        self.changepoint_box.setValue(80)
        self.changepoint_box.setSuffix("%")
        self.hyper_other_layout.addWidget(self.changepoint_box, 1, 1, 1, 1)

        self.pred_param_layout.addLayout(self.hyper_other_layout)

        self.pred_default_but = QtWidgets.QPushButton(self.pred_page)
        self.pred_default_but.setObjectName("pred_default_but")
        self.pred_param_layout.addWidget(self.pred_default_but)

        self.pred_param_layout.addItem(spacerItem)

        self.pred_days_label = QtWidgets.QLabel(self.pred_page)
        self.pred_days_label.setSizePolicy(sizePolicy)
        self.pred_days_label.setObjectName("pred_days_label")
        self.pred_param_layout.addWidget(self.pred_days_label)

        self.pred_days_box = QtWidgets.QSpinBox(self.pred_page)
        self.pred_days_box.setObjectName("pred_days_box")
        self.pred_days_box.setAccelerated(True)
        self.pred_days_box.setRange(1, 1826)
        self.pred_days_box.setValue(365)
        self.pred_days_box.setSuffix(" jours")
        self.pred_param_layout.addWidget(self.pred_days_box)

        self.start_pred_but = QtWidgets.QPushButton(self.pred_page)
        self.start_pred_but.setObjectName("start_pred_but")
        self.pred_param_layout.addWidget(self.start_pred_but)

        self.pred_page_layout.addLayout(self.pred_param_layout)


        self.graph_layout = QtWidgets.QHBoxLayout()
        self.graph_layout.setObjectName("graph_layout")

        self.pred_graph = QtWidgets.QLabel(self.pred_page)
        self.pred_graph.setSizePolicy(sizePolicy)
        self.pred_graph.setText("")
        self.pred_graph.setObjectName("pred_graph")
        self.graph_layout.addWidget(self.pred_graph)

        self.component_graph = QtWidgets.QLabel(self.pred_page)
        self.component_graph.setText("")
        self.component_graph.setObjectName("component_graph")
        self.graph_layout.addWidget(self.component_graph)

        self.pred_page_layout.addLayout(self.graph_layout)

        self.rmse = QtWidgets.QLabel(self.pred_page)
        self.rmse.setObjectName("rmse")
        self.rmse.setSizePolicy(sizePolicy)
        self.rmse.setAlignment(QtCore.Qt.AlignCenter)
        self.rmse.setStyleSheet("font-weight: bold; font-family : Trebuchet MS; font-size : 25px;")
        self.pred_page_layout.addWidget(self.rmse)

        self.preproc_but = QtWidgets.QPushButton(self.pred_page)
        self.preproc_but.setObjectName("preproc_but")
        self.preproc_but.setIcon(QtGui.QIcon("Assets:data.png"))
        self.pred_page_layout.addWidget(self.preproc_but)

        self.pages.addWidget(self.pred_page)

        self.main_layout.addWidget(self.pages)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.pages.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        MainWindow.showFullScreen()

######################### CONNEXION ##############################
        self.pred_page_but.clicked.connect(self.to_pred_page)
        self.preproc_but.clicked.connect(self.to_preproc_page)
        self.open_but.clicked.connect(self.open)
        self.create_data_but.clicked.connect(self.create_data)
        self.missing_values_but.clicked.connect(self.fill_missing)
        self.start_pred_but.clicked.connect(self.handle_pred)
        self.pred_default_but.clicked.connect(self.reset_hyper)
        self.reset_but.clicked.connect(self.reset_data)
        self.save_but.clicked.connect(self.save)
        self.save_as_but.clicked.connect(self.save_as)

        self.disable_buts()

    def disable_buts(self):
        self.pred_page_but.setEnabled(False)
        self.missing_values_but.setEnabled(False)
        self.save_as_but.setEnabled(False)
        self.save_but.setEnabled(False)
        self.data_col_sel_box.setEnabled(False)
        self.date_col_sel_box.setEnabled(False)
        self.create_data_but.setEnabled(False)
        self.missing_values_box.setEnabled(False)
        self.reset_but.setEnabled(False)

    def to_pred_page(self):
        self.pages.setCurrentIndex(1)
    
    def to_preproc_page(self):
        self.pages.setCurrentIndex(0)

    def open(self):
        self.disable_buts()
        self.date_col_sel_box.clear()
        self.data_col_sel_box.clear()

        self.pred_page_but.setEnabled(False)

        self.file, ok = QtWidgets. QFileDialog.getOpenFileName(MainWindow, 'Ouvrir', os.getenv('HOME') , 'CSV(*.csv)')

        if ok:
            self.df = pd.read_csv(self.file)

            self.display_df(self.df)

            self.data_col_sel_box.addItems(list(self.df))
            self.date_col_sel_box.addItems(list(self.df))

            self.data_col_sel_box.setEnabled(True)
            self.date_col_sel_box.setEnabled(True)
            self.create_data_but.setEnabled(True)


    def display_df(self, df):
        self.model = PdModel.PandasModel(df)
        self.data_viewer.setModel(self.model)

    def create_data(self):
        date_col = self.date_col_sel_box.currentText()
        data_col = self.data_col_sel_box.currentText()
        self.data_df = pd.DataFrame()

        try:
            self.data_df = self.df[[date_col, data_col]]
            self.data_df = self.data_df.groupby(date_col).mean().reset_index()
            self.data_df.rename(columns = {date_col : "ds", data_col : "y"}, inplace = True)
            self.data_df['ds'] = pd.to_datetime(self.data_df['ds'])
            self.data_df.sort_values("ds", inplace = True)

            self.display_df(self.data_df)

            self.pred_page_but.setEnabled(True)

        except:
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText(f"Impossible de créer le dataset")
            msg.setWindowTitle("Erreur")
            msg.exec_()
        
        self.pred_page_but.setEnabled(True)
        self.missing_values_but.setEnabled(True)
        self.save_as_but.setEnabled(True)
        self.save_but.setEnabled(True)
        self.missing_values_box.setEnabled(True)
        self.reset_but.setEnabled(True)
    
    def fill_missing(self):

        fill_type = self.missing_values_box.currentText()

        if fill_type == "Front Fill":
            self.data_df["y"].fillna(method='ffill')

        elif fill_type == "Back Fill":
            self.data_df["y"].fillna(method='bfill')

        elif fill_type == "Mean Fill":
            self.data_df["y"].fillna(self.data_df['y'].mean())

    def handle_pred(self):

        self.model = Prophet(
            changepoint_prior_scale = self.trend_box.value(),
            seasonality_prior_scale = self.saison_box.value(),
            holidays_prior_scale = self.holiday_box.value(),
            changepoint_range = self.changepoint_box.value() / 100,
            seasonality_mode = self.saison_mode_box.currentText()
        )

        self.get_pred()

    def get_pred(self):
        progress_dialog = QtWidgets.QProgressDialog('Détection en cours, patientez ...', None, 0, 0, MainWindow)
        progress_dialog.setWindowModality(QtCore.Qt.WindowModal)
        progress_dialog.setWindowTitle('Détection')
        progress_dialog.show()

        self.worker = ProThread(self)

        self.worker.finished.connect(progress_dialog.close)
        self.worker.start()

    
    def reset_hyper(self):
        self.trend_box.setValue(0.05)
        self.saison_box.setValue(10)
        self.holiday_box.setValue(10)
        self.saison_mode_box.setCurrentIndex(0)
        self.changepoint_box.setValue(80)
    
    def reset_data(self):
        self.pred_page_but.setEnabled(False)
        self.missing_values_but.setEnabled(False)
        self.missing_values_box.setEnabled(False)
        self.save_as_but.setEnabled(False)
        self.save_but.setEnabled(False)
        self.reset_but.setEnabled(False)

        self.display_df(self.df)

    def save (self):
        self.data_df.to_csv(self.file)

    def save_as (self):
        path, ok = QtWidgets.QFileDialog.getSaveFileName(MainWindow, 'Sauvegarder', os.getenv('HOME'), 'CSV(*.csv)')

        if ok:
            self.data_df.to_csv(path)
    

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ProphAvocado"))
        self.data_page_title.setText(_translate("MainWindow", "Traitement des données"))
        self.open_but.setText(_translate("MainWindow", "Ouvrir"))
        self.save_but.setText(_translate("MainWindow", "Sauvegarder"))
        self.save_as_but.setText(_translate("MainWindow", "Sauvegarder sous"))
        self.data_sel_label.setText(_translate("MainWindow", "Sélection des données"))
        self.date_col_sel_label.setText(_translate("MainWindow", "Colonne Date"))
        self.data_col_sel_label.setText(_translate("MainWindow", "Colonne Data"))
        self.create_data_but.setText(_translate("MainWindow", "Créer le dataset"))
        self.missing_values_label.setText(_translate("MainWindow", "Gestion des valeurs manquantes"))
        self.missing_values_but.setText(_translate("MainWindow", "Appliquer"))
        self.reset_but.setText(_translate("MainWindow", "Rétablir"))
        self.pred_page_but.setText(_translate("MainWindow", "Prédiction "))
        self.pred_page_label.setText(_translate("MainWindow", "Prédiction"))
        self.mode_label.setText(_translate("MainWindow", "Mode"))
        self.test_radio.setText(_translate("MainWindow", "Test"))
        self.prophecy_radio.setText(_translate("MainWindow", "Prophétique"))
        self.hyper_label.setText(_translate("MainWindow", "Hyperparamètres"))
        self.saison_label.setText(_translate("MainWindow", "Flexibilité saisonnière"))
        self.trend_label.setText(_translate("MainWindow", "Flexibilité de la tendance"))
        self.holiday_label.setText(_translate("MainWindow", "Flexibilité vacancière"))
        self.changepoint_label.setText(_translate("MainWindow", "Changepoint de tendance"))
        self.saison_mode_label.setText(_translate("MainWindow", "Mode de saisonnalité"))
        self.pred_default_but.setText(_translate("MainWindow", "Par Défault"))
        self.pred_days_label.setText(_translate("MainWindow", "Période de prédiction"))
        self.start_pred_but.setText(_translate("MainWindow", "Lancer la Prédiction"))
        self.preproc_but.setText(_translate("MainWindow", "Traitement des données"))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)

    QtCore.QDir.addSearchPath('Assets', os.path.join(os.path.dirname(os.path.abspath(__file__)), 'Assets'))

    app.setWindowIcon(QtGui.QIcon("Assets:Logo.png"))
    file = QtCore.QFile('Assets:Style.qss')
    file.open(QtCore.QFile.ReadOnly | QtCore.QFile.Text)
    app.setStyleSheet(str(file.readAll(), 'utf-8'))

    MainWindow = QtWidgets.QMainWindow()

    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

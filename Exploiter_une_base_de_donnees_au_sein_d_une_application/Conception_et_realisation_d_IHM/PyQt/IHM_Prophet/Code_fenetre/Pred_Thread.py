from PyQt5 import QtCore, QtGui, QtWidgets
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
import os, sys
import pandas as pd
from prophet import Prophet
import numpy as np
import matplotlib.pyplot as plt

class ProThread(QtCore.QThread):
    finished = QtCore.pyqtSignal()

    def __init__(self, main, parent=None):
        super().__init__(parent)
        self.main = main

    def run(self):
        if self.main.test_radio.isChecked():
            breakpoint = round(self.main.data_df.shape[0] * 0.8)
            train = self.main.data_df.iloc[:breakpoint]
            test = self.main.data_df.iloc[breakpoint:]

            self.main.model.fit(train)

            n_days = int((test['ds'].iloc[-1] - test['ds'].iloc[0]) / np.timedelta64(1, 'D'))


            future = self.main.model.make_future_dataframe(periods = n_days)
            pred = self.main.model.predict(future)

            PROPHET_df = pd.merge(test.copy(), pred[['ds', 'yhat']], on = 'ds')

            pred_plot = plt.figure(figsize = (10, 6))
            ax = pred_plot.add_subplot(111)
            ax.plot(self.main.data_df['ds'], self.main.data_df['y'], label = 'Observation')
            ax.plot(PROPHET_df['ds'], PROPHET_df['yhat'], label = 'prediction', linestyle = 'dashed', color = 'red')
            ax.legend()

            comp_plot = self.main.model.plot_components(pred)

            rmse_value = ((PROPHET_df['yhat'] - self.main.data_df['y']) ** 2).mean() ** 0.5

            self.main.rmse.setText('RMSE :' + str(rmse_value))
            mean = self.main.data_df['y'].mean()

            if rmse_value > mean * 0.01 :
                self.main.rmse.setStyleSheet("color : red;")

            elif rmse_value > mean * 0.05 :
                self.main.rmse.setStyleSheet("color : yellow;")

            else:
                self.main.rmse.setStyleSheet("color : green;")

            self.main.pred_graph.setPixmap(self.get_pixmap(pred_plot))
            self.main.component_graph.setPixmap(self.get_pixmap(comp_plot))

        else:
            self.main.model.fit(self.main.data_df)
            future = self.main.model.make_future_dataframe(periods=int(self.main.pred_days_box.value()))
            pred = self.main.model.predict(future)
            pred = pred[pred['ds'] > self.main.data_df['ds'].iloc[-1]]

            pred_plot = plt.figure(figsize = (10, 6))
            ax = pred_plot.add_subplot(111)
            ax.plot(self.main.data_df['ds'], self.main.data_df['y'], label = 'Observation')
            ax.plot(pred['ds'], pred['yhat'], label = 'prediction', linestyle = 'dashed', color = 'red')
            ax.legend()

            comp_plot = self.main.model.plot_components(pred)

            self.main.pred_graph.setPixmap(self.get_pixmap(pred_plot))
            self.main.component_graph.setPixmap(self.get_pixmap(comp_plot))

            self.main.rmse.setText("")


        self.finished.emit()

            
    def get_pixmap(self, fig):
        canvas = FigureCanvas(fig)
        canvas.draw()
        width, height = fig.figbbox.width, fig.figbbox.height
        img = QtGui.QImage(canvas.buffer_rgba(), width, height, QtGui.QImage.Format_RGBA8888)
        pixmap = QtGui.QPixmap(img)
        return pixmap
        

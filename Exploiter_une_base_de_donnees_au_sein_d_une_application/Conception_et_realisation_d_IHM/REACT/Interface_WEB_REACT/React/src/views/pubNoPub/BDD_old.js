import {
  Row,
  Col,
} from 'reactstrap';

import React, { useState, useEffect } from 'react';
import { collection, query, getDocs, limit, orderBy } from "firebase/firestore";
import { db } from '../../components/firebase/Firebase';
import BreadCrumbs from '../../layouts/breadcrumbs/BreadCrumbs';
import ComponentCard from '../../components/ComponentCard';

const BDD = () => {

  const [version, setVersion] = useState(null);
  const [dateInfo, setDateInfo] = useState(null);
  const [dev, setDevs] = useState(null);
  const [nbUser, setNbUser] = useState(null);
  const [success, setSuccess] = useState(null);

  const [dateRapport, setDateRapport] = useState(null);
  const [erreur, setErreur] = useState(null);
  const [images, setImages] = useState(null);
  const [predNoPub, setPredNoPub] = useState(null);
  const [predPub, setPredPub] = useState(null);

  const [iou, setIou] = useState(null);
  const [maxDet, setMaxDet] = useState(null);
  const [conf, setConf] = useState(null);

  useEffect(() => {
    // Fonction pour récupérer le document depuis Firestore
    const getDocument = async () => {
      try {
        const qInfo = query(collection(db, "infos"), orderBy('date', 'desc'), limit(1));
        const querySnapshotInfo = await getDocs(qInfo);
        querySnapshotInfo.forEach((doc) => {

          setVersion(doc.data().version);
          const rawDateInfo = new Date(doc.data().date.seconds * 1000)
          setDateInfo(rawDateInfo.toUTCString());
          setDevs(doc.data().dev);
          setNbUser(doc.data().nb_user);
          setSuccess(doc.data().success_rate);

          console.log(doc.id, " => ", doc.data());
        });

        const qRapport = query(collection(db, "rapports"), orderBy('date_rapport', 'desc'), limit(1));
        const querySnapshotRapport = await getDocs(qRapport);
        querySnapshotRapport.forEach((doc) => {

          const rawDateRapport = new Date(doc.data().date_rapport.seconds * 1000)
          setDateRapport(rawDateRapport.toUTCString());
          setErreur(doc.data().erreur.toString());
          setImages(doc.data().images.toString());
          setPredNoPub(doc.data().prediction_classe_noPub);
          setPredPub(doc.data().prediction_classe_pub);

          console.log(doc.id, " => ", doc.data());
        });

        const qParam = query(collection(db, "parametres"), limit(1));
        const querySnapshotParam = await getDocs(qParam);
        querySnapshotParam.forEach((doc) => {
          setIou(doc.data().iou);
          setMaxDet(doc.data().max_det);
          setConf(doc.data().conf);

          console.log(doc.id, " => ", doc.data());
        });
      } catch (error) {
        console.error('Erreur lors de la récupération du document :', error);
      }
    };
    // Appel de la fonction pour récupérer le document
    getDocument();
  }, []);

  return (
    <div>
      <BreadCrumbs />
      {/* --------------------------------------------------------------------------------*/}
      {/* Row*/}
      {/* --------------------------------------------------------------------------------*/}
      <Row>
        <Col lg="12">
          <ComponentCard title="Infos sur le projet">
            Version : {version}<br />
            Date de mise à jour : {dateInfo}<br />
            Développeurs : {dev} <br />
            Nombre d&lsquo;utilisateurs : {nbUser}<br />
            Taux de réussite : {Math.round(success * 100)} %
          </ComponentCard>
        </Col>
      </Row>
      <Row>
        <Col lg="6">
          <ComponentCard title="Dernier rapport">
            Date du rapport : {dateRapport}<br />
            Erreur : {erreur} <br />
            Image : {images}<br />
            Prédiction NoPub : {Math.round(predNoPub * 100)} %<br />
            Prédiction Pub : {Math.round(predPub * 100)} %
          </ComponentCard>
        </Col>
        <Col lg="6">
          <ComponentCard title="Paramètres du dernier rapport">
            IOU : {iou}<br />
            Nombre de détection : {maxDet} <br />
            Seuil de confiance : {conf}<br />
          </ComponentCard>
        </Col>
      </Row>
      
      {/* -------------------------------------------------------------------------------- */}
      {/* Row */}
      {/* -------------------------------------------------------------------------------- */}

      
    </div>
  );
};

export default BDD;

import firebase_admin
from firebase_admin import credentials, firestore
from flask import jsonify, Flask, request
from flask_cors import CORS
from datetime import datetime, timedelta
import jwt
from mysql import connector

cred_json = {
    "type": "service_account",
    "project_id": "devia-f6704",
    "private_key_id": "acc6af1d01ec2c95392e37da0f7587fd5ff28421",
    "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQC2UANua/7D6l1u\n4U7XpQbiNKcid45DRHuSkRMTkiJCehHw+yy9rWLCPtWiRRSWNXi9rG4f0P+all9n\n3ahcIjQbBbqv8eojkejalS7q0+OFWa0qv8GGJgdiN6CqdwAa+2RxxWox7T2EtDkS\nxAz0NLu60MWjdcNs8XFWeP7bF1HJSIILeVjF2JF0qprjbuFtXs3XIHIK/bMCLZaO\nSRyWt5yhekqhwXiu0AE6wCBYz+YaTaxnBeAPNHWFsPkzWCmvkqlmAaqXI3kjSm6F\nuOn1q9kjij32vVaH7ZbIVcZ+Pro8tcEm6zYhzD5RRtZlPryPm73llXc8+ityswoS\nTQnYm3fxAgMBAAECggEACvsGPeIYyd2Fi55b5I6eu8SelWucgK4xACqnOrxIPndC\nOeCy+OimxFrK/LdK7mIhl9D5IAbzQjEQ5X1a/NOdjkwZyquYJdTNsM6f8Qpaj4dP\nb/31Lrp/ItoFXgcFVVqzWcvhYcjvddzx/BCdVB8R+IZHBRmcb+UZ5bKrbPA6X5RZ\nhlFqYC+9BaVXV1sZjYCsdP+QCHebv6GR2n2ZjPrM2csWmZBri3S360b2gHpJWO6M\nptQbSdM0sTecCcFQcjBr7KMBqlmB6Ra1KV+i7/7aSY9oJmfeefXBHpIoK1DFdFzG\nJS8mJMP9ar8BYiOxnSasQnxwxLpPZ9V/1Mtlz79PDQKBgQDtq1kcujDP3FiXdtU3\n0EUiUO1zFs2QnJIh95txEiSQxPQ2E7mcLCPybjculXBXwdC7pysDHbOzYs6tgwgy\n3Jw53Etsx2FB1asfim9xVpG6/30dUQJLDIjrsblAEzJcTvUzIezk6T/t2cAgHTLg\naqPPDGUDezaaj5bzS6DnUebHpQKBgQDEX60Br3TENoLh9ltPZLGlD1nC2Og+l+oP\nnwgTWJRrVqqZykOFavd1zj67WnvLr0FAfzW740ioS+Km6pxRdYfuX/c9QN8LJZEG\nLSAKePLDwSJnE385N1AKCBUG3abFEobI0ENiEpU4V3XXXUwyN6kfl9GA9dJHiu3N\n08ZH5+ZdXQKBgDt8PoKNK3hrCxVl3bnpe9Q58yRyGaNPPNgZlCM5ykMduI3sY/Ft\nrtWXtmIHbyXX0bmV/pL6FScZ3Obau+uXAdcNhydDw9jpdLohOQFiDHmERrlWtD86\ndO6g/d/Grj0iWgahQByPMLwEWyzugfRfXH6O+J1lcmY++CYO0Mf03NEtAoGBALvj\nUxQmvVEzWt06qrj2/iWQ33BXuzaQgYm6vq5L9Y4SGR8WcK5J30VfNZRrCcGkCIne\nbRo9Z/pmyRCtry0diBaiyVtZI091/SFssZhzisuTkggPlo23B6ThgMTV9MfgZwfi\nhGZko1OKEx0hjlMKAI5S40hBa5W6Lrfd5XxNPJOdAoGANYZn6xj98HQWsTCfyfI7\nIq2drkq1QDPtns5/dxme5GHH/xPnc4/ooospNJu4MKKoL3y4iQmLO+tVRWIYLo6M\njbm8DjHjVK7pwOUvrYcfkDyMsevHXzc349zF3dSRUgph/0KwoYF0uwKuJ4rYGVYO\noQFWLKb1moKoxpsgwj4dcpo=\n-----END PRIVATE KEY-----\n",
    "client_email": "firebase-adminsdk-ay7ci@devia-f6704.iam.gserviceaccount.com",
    "client_id": "103202386953107051931",
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-ay7ci%40devia-f6704.iam.gserviceaccount.com",
    "universe_domain": "googleapis.com"
}


cred = credentials.Certificate(cred_json)
firebase_admin.initialize_app(cred)

db = firestore.client()

def open_connection():
    connection = connector.connect(
        user='LeBonCassoulet',
        password='azertyuiop1234',
        host='LeBonCassoulet.mysql.pythonanywhere-services.com',
        database='LeBonCassoulet$PubNoPub'
    )
    cursor = connection.cursor(buffered=True)
    return (cursor, connection)

def close_connection(cursor, connection):
    cursor.close()
    connection.close()

app = Flask(__name__)
CORS(app, origins='*', supports_credentials=True)

######################################################################
#############################   SECURE   #############################
######################################################################

SECRET_KEY = "Grogu"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

def create_access_token(username: str) -> str:
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode = {"sub": username, "exp": expire}
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

    return encoded_jwt


@app.route("/login", methods=["POST"])
def login():
    form_data = {"username": request.json.get("username"), "password" : request.json.get("password")}
    query = "SELECT * FROM users WHERE username = %s AND password = %s;"
    params = (form_data['username'], form_data['password'])

    cursor, connection = open_connection()
    cursor.execute(query, params)
    results = cursor.fetchone()
    close_connection(cursor, connection)

    if not results:
        return jsonify({"error": "Invalid username or password"}), 400

    access_token = create_access_token(form_data["username"])

    return jsonify({"access_token": access_token, "token_type": "bearer"})

def test_token(token):

    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username = payload.get("sub")

        if username is None:
            return jsonify({"error": "Invalid authentication token"})

        query = "SELECT password FROM users WHERE username = %s;"
        params = username
        cursor, connection = open_connection()
        cursor.execute(query, (params,))
        close_connection(cursor, connection)

        user = {"username" : username, "password" : cursor.fetchone()}

    except jwt.exceptions.DecodeError:
        return jsonify({"error": "Invalid authentication token"})

    except jwt.exceptions.ExpiredSignatureError:
        return jsonify({"error": "Expired authentication token"})



    return user

#######################################################################
###############################   GET   ###############################
#######################################################################

##################### Index #########################
@app.route('/', methods=['GET'])
def index():
    token = request.json.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):
        return(
        """
        <h1 align="center">API du projet PubNoPub</h1>
        """
    )

    return user


##################### Tous les rapports (GET) #########################
@app.route('/allRapports', methods=['GET'])
def get_all_rapports():
    token = request.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):
        col_ref = db.collection("rapports")
        docs = col_ref.get()
        documents = []

        for doc in docs:

            doc = doc.to_dict()

            for key in doc:
                if isinstance(doc[key], firestore.DocumentReference):
                    doc[key] = doc[key].path

            documents.append(doc)
        if documents:
            return jsonify(documents)
        else:
            return jsonify({'error': 'Collection not found'})

    return user

##################### Dernier rapport (GET) #########################
@app.route('/dernierRapport', methods=['GET'])
def get_last_rapport():

    print('token')
    token = request.headers.get("Authorization")
    print(token)

    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):
        col_ref = db.collection("rapports")
        doc = col_ref.order_by('date_rapport', direction=firestore.Query.DESCENDING).get()

        if doc:

            doc = doc[0].to_dict()

            for key in doc:
                if isinstance(doc[key], firestore.DocumentReference):
                    doc[key] = doc[key].path


            return jsonify(doc)
        else:
            return jsonify({'error': 'Collection not found'})

    return user

##################### Infos du projet (dernière version) (GET) #########################
@app.route('/infos', methods=['GET'])
def get_infos():
    token = request.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):
        col_ref = db.collection("infos")
        doc = col_ref.order_by('date', direction=firestore.Query.DESCENDING).get()

        if doc:
            doc = doc[0].to_dict()
            return jsonify(doc)
        else:
            return jsonify({'error': 'Collection not found'})

    return user

##################### Dernier paramètres utilisés (GET) #########################
@app.route('/parametres', methods=['GET'])
def get_params():
    token = request.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):
        # Récupération de la réference dans dernierRapport
        last_rapport = get_last_rapport().get_json()
        param_ref = last_rapport["parametres"].split('/')[-1]

        doc_ref = db.collection("parametres").document(param_ref)
        doc = doc_ref.get()

        if doc:
            doc = doc.to_dict()
            return jsonify(doc)
        else:
            return jsonify({'error': 'Collection not found'})

    return user

##################### Plusieurs rapports avec arg (GET) #########################
@app.route('/rapports/<int:nb>', methods=['GET'])
def get_x_rapports(nb):
    token = request.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):
        col_ref = db.collection("rapports")
        docs = col_ref.order_by('date_rapport', direction=firestore.Query.DESCENDING).limit(nb).get()
        documents = []

        for doc in docs:

            doc = doc.to_dict()

            for key in doc:
                if isinstance(doc[key], firestore.DocumentReference):
                    doc[key] = doc[key].path

            documents.append(doc)
        if documents:
            return jsonify(documents)
        else:
            return jsonify({'error': 'Collection not found'})

    return user


#######################################################################
##############################   POST   ###############################
#######################################################################

##################### Ajout d'un rapport (POST) #########################
@app.route('/rapports', methods=['POST'])
def post_rapport():
    token = request.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):

        args = request.json

        try:
            args["date_rapport"] = datetime.strptime(args["date_rapport"], '%d-%m-%Y %H:%M:%S')
            args['parametres'] = db.collection('parametres').document(args['parametres'])
            col_ref = db.collection('rapports')
            col_ref.add(args)

            return 'Rapport_uploaded'

        except Exception as e:
            return str(e)

    return user


##################### Ajout d'infos (POST) #########################
@app.route('/infos', methods=['POST'])
def post_infos():

    token = request.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):

        args = request.json

        try:
            args["date"] = datetime.strptime(args["date"], '%d-%m-%Y %H:%M:%S')
            col_ref = db.collection('infos')
            col_ref.add(args)

            return 'Infos_uploaded'

        except Exception as e:
            return str(e)

    return user

##################### Ajout de parametres (POST) #########################
@app.route('/parametres', methods=['POST'])
def post_parametres():
    token = request.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):

        args = request.json

        try:
            col_ref = db.collection('parametres')
            col_ref.add(args)

            return 'Parametres_uploaded'

        except Exception as e:
            return str(e)

    return user

##################### Ajout d'un User (POST) #########################
@app.route('/addUser', methods=['POST'])
def post_user():
    token = request.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):

        args = request.json

        try:
            query = "INSERT INTO users (username, password) VALUES (%s, %s);"
            params = (args['username'], args['password'])

            cursor, connection = open_connection()
            cursor.execute(query, params)
            close_connection(cursor, connection)

            return 'Parametres_uploaded'

        except Exception as e:
            return str(e)

    return user

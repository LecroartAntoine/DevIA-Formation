from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import jwt

app = Flask(__name__)

# Secret key for signing and verifying JWT tokens
SECRET_KEY = "your_secret_key"

# Algorithm for JWT encoding and decoding
ALGORITHM = "HS256"

# Number of minutes until token expires
ACCESS_TOKEN_EXPIRE_MINUTES = 60

# Fake user database for demonstration purposes
USERS = {
    "john@example.com": {
        "username": "john@example.com",
        "password": "password123",
        "full_name": "John Doe",
        "disabled": False,
    },
    "grogu@grogu.com": {
        "username": "grogu@grogu.com",
        "password": "grogu",
        "full_name": "The Child",
        "adresse": "1 rue de la force, 99999, Mandalore",
        "disabled": False,
    }
}

# Function to create access tokens
def create_access_token(username: str) -> str:
    # Set token expiration time
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)

    # Create JWT payload
    to_encode = {"sub": username, "exp": expire}

    # Generate and return access token
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

# Route for handling user login and returning access token
@app.route("/login", methods=["POST"])
def login():
    # Retrieve form data
    form_data = request.form

    # Check if user exists
    if form_data["username"] not in USERS:
        return jsonify({"error": "Invalid username or password"}), 400

    # Check if password is correct
    user = USERS[form_data["username"]]
    if form_data["password"] != user["password"]:
        return jsonify({"error": "Invalid username or password"}), 400

    # Create and return access token
    access_token = create_access_token(user["username"])
    return jsonify({"access_token": access_token, "token_type": "bearer"})

def test_token(token):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username = payload.get("sub")
        if username is None:
            return jsonify({"error": "Invalid authentication token"}), 401
    except jwt.exceptions.DecodeError:
        return jsonify({"error": "Invalid authentication token"}), 401
    except jwt.exceptions.ExpiredSignatureError:
        return jsonify({"error": "Expired authentication token"}), 401

    # Check if user exists
    if username not in USERS:
        return jsonify({"error": "User not found"}), 401

    # Return user data
    user = USERS[username]
    return user

# Protected route that requires access token
@app.route("/protected", methods=["GET"])
def protected_route():
    # Retrieve token from headers
    token = request.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    # Remove "Bearer " prefix from token
    token = token.replace("Bearer ", "")

    # Verify and decode token
    user = test_token(token)

    if isinstance(user, dict):
        #LE CODE DU ENDPONT ICI
        return jsonify({"username": user["username"], "full_name": user["full_name"], "adresse": user["adresse"]})
        

    return jsonify(user), 401

if __name__ == "__main__":
    app.run(debug=True)

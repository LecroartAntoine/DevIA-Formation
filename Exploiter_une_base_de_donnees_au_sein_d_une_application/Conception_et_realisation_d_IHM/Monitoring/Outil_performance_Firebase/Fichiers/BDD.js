import {
  Row,
  Col,
} from 'reactstrap';



import React, { useState, useEffect } from 'react';
import axios from 'axios';

import { trace } from "firebase/performance";
import { perf } from '../../components/firebase/Firebase';

import BreadCrumbs from '../../layouts/breadcrumbs/BreadCrumbs';
import ComponentCard from '../../components/ComponentCard';

const BDD = () => {

  const myApi = axios.create({
    baseURL: 'https://leboncassoulet.pythonanywhere.com/',
    timeout: 50000,
    withCredentials: true,
    transformRequest: [(data) => JSON.stringify(data || {})],
    headers: {
      'Accept': 'application/json',
      'Content-Type': 'application/json',
    }
  });

  const setAuthToken = (token) => {
    myApi.defaults.headers.Authorization = `Bearer ${token}`;
  };
  
  const [dataInfos, setDataInfos] = useState(null);
  const [dataRapport, setDataRapport] = useState(null);
  const [dataParametres, setDataParametres] = useState(null);

  const fetchToken = async (login) => {
    try {
      const traceToken = trace(perf, "TRACE_TOKEN");
      traceToken.start();
      const responseToken = await myApi.post('/login', login);
      const token = responseToken.data.access_token;
      traceToken.stop();

      setAuthToken(token);

      const responseParam = await myApi.get('/parametres'); 
      setDataParametres(responseParam.data);

      const responseInfos = await myApi.get('/infos'); 
      setDataInfos(responseInfos.data);

      const responseRapports = await myApi.get('/dernierRapport'); 
      setDataRapport(responseRapports.data);

    } catch (error) {
      console.error(error);
    }
  };

  useEffect(() => {
    fetchToken({"username": "Grogu", "password": "Grogu"});
  }, []);

  return (
    <div>
      <BreadCrumbs />
      <Row>
        <Col lg="12">
          <ComponentCard title="Infos sur le projet">
            Version : {dataInfos ? (JSON.stringify(dataInfos.version, null, 2)) : ('Loading data...')}<br />
            Date de mise à jour : {dataInfos ? (JSON.stringify(dataInfos.date, null, 2)) : ('Loading data...')}<br />
            Développeurs : {dataInfos ? (JSON.stringify(dataInfos.dev, null, 2)) : ('Loading data...')}<br />
            Nombre d&lsquo;utilisateurs : {dataInfos ? (JSON.stringify(dataInfos.nb_user, null, 2)) : ('Loading data...')}<br />
            Taux de réussite : {dataInfos ? (Math.round(JSON.stringify(dataInfos.success_rate, null, 2) * 100)) : ('Loading data...')} %
          </ComponentCard>
        </Col>
      </Row>
      <Row>
        <Col lg="6">
          <ComponentCard title="Dernier rapport">
            Date du rapport : {dataRapport ? (JSON.stringify(dataRapport.date_rapport, null, 2)) : ('Loading data...')}<br />
            Erreur : {dataRapport ? (JSON.stringify(dataRapport.erreur, null, 2)) : ('Loading data...')}<br />
            Images : {dataRapport ? (JSON.stringify(dataRapport.images, null, 2)) : ('Loading data...')}<br />
            Prédiction NoPub : {dataRapport ? (Math.round(JSON.stringify(dataRapport.prediction_classe_noPub, null, 2) * 100)) : ('Loading data...')} %<br />
            Prédiction Pub : {dataRapport ? (Math.round(JSON.stringify(dataRapport.prediction_classe_pub, null, 2) * 100)) : ('Loading data...')} %
          </ComponentCard>
        </Col>
        <Col lg="6">
          <ComponentCard title="Paramètres du dernier rapport">
            IOU : {dataParametres ? (JSON.stringify(dataParametres.iou, null, 2)) : ('Loading data...')}<br />
            Nombre de détection :  {dataParametres ? (JSON.stringify(dataParametres.max_det, null, 2)) : ('Loading data...')}<br />
            Seuil de confiance : {dataParametres ? (Math.round(JSON.stringify(dataParametres.conf, null, 2)*100)) : ('Loading data...')} %<br />
          </ComponentCard>
        </Col>
      </Row>
    </div>
  );
};

export default BDD;

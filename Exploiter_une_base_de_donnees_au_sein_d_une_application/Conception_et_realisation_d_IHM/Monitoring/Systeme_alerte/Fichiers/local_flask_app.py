import firebase_admin
from firebase_admin import credentials, firestore
from flask import jsonify, Flask, request
from flask_cors import CORS
from datetime import datetime
import flask_monitoringdashboard as dashboard



cred = credentials.Certificate(cred_json)
firebase_admin.initialize_app(cred)

db = firestore.client()

app = Flask(__name__)
CORS(app)
dashboard.bind(app)

#######################################################################
###############################   GET   ###############################
#######################################################################

##################### Index #########################
@app.route('/', methods=['GET'])
def index():
    return(
        """
        <h1 align="center">API du projet PubNoPub</h1>
        """
    )

##################### Tous les rapports (GET) #########################
@app.route('/allRapports', methods=['GET'])
def get_all_rapports():
    col_ref = db.collection("rapports")
    docs = col_ref.get()
    documents = []
    
    for doc in docs:

        doc = doc.to_dict()
        
        for key in doc:
            if isinstance(doc[key], firestore.DocumentReference):
                doc[key] = doc[key].path
        
        documents.append(doc)
    if documents:
        return jsonify(documents)
    else:
        return jsonify({'error': 'Collection not found'})

##################### Dernier rapport (GET) #########################
@app.route('/dernierRapport', methods=['GET'])
def get_last_rapport():
    col_ref = db.collection("rapports")
    doc = col_ref.order_by('date_rapport', direction=firestore.Query.DESCENDING).get()
   
    if doc:

        doc = doc[0].to_dict()
        
        for key in doc:
            if isinstance(doc[key], firestore.DocumentReference):
                doc[key] = doc[key].path
            

        return jsonify(doc)
    else:
        return jsonify({'error': 'Collection not found'})

##################### Infos du projet (dernière version) (GET) #########################
@app.route('/infos', methods=['GET'])
def get_infos():
    col_ref = db.collection("infos")
    doc = col_ref.order_by('date', direction=firestore.Query.DESCENDING).get()
   
    if doc:
        doc = doc[0].to_dict()
        return jsonify(doc)
    else:
        return jsonify({'error': 'Collection not found'})
    
##################### Dernier paramètres utilisés (GET) #########################
@app.route('/parametres', methods=['GET'])
def get_params():

    # Récupération de la réference dans dernierRapport
    last_rapport = get_last_rapport().get_json()
    param_ref = last_rapport["parametres"].split('/')[-1]

    doc_ref = db.collection("parametres").document(param_ref)
    doc = doc_ref.get()
   
    if doc:
        doc = doc.to_dict()
        return jsonify(doc)
    else:
        return jsonify({'error': 'Collection not found'})
    
##################### Plusieurs rapports avec arg (GET) #########################
@app.route('/rapports/<int:nb>', methods=['GET'])
def get_x_rapports(nb):
    col_ref = db.collection("rapports")
    docs = col_ref.order_by('date_rapport', direction=firestore.Query.DESCENDING).limit(nb).get()
    documents = []
    
    for doc in docs:

        doc = doc.to_dict()
        
        for key in doc:
            if isinstance(doc[key], firestore.DocumentReference):
                doc[key] = doc[key].path
        
        documents.append(doc)
    if documents:
        return jsonify(documents)
    else:
        return jsonify({'error': 'Collection not found'})
    

#######################################################################
##############################   POST   ###############################
#######################################################################

##################### Ajout d'un rapport (POST) #########################
@app.route('/rapports', methods=['POST'])
def post_rapport():

    args = request.json

    try:
        args["date_rapport"] = datetime.strptime(args["date_rapport"], '%d-%m-%Y %H:%M:%S')
        args['parametres'] = db.collection('parametres').document(args['parametres'])
        col_ref = db.collection('rapports')
        col_ref.add(args)

        return 'Rapport_uploaded'

    except Exception as e:
        return str(e)


##################### Ajout d'infos (POST) #########################
@app.route('/infos', methods=['POST'])
def post_infos():

    args = request.json

    try:
        args["date"] = datetime.strptime(args["date"], '%d-%m-%Y %H:%M:%S')
        col_ref = db.collection('infos')
        col_ref.add(args)

        return 'Infos_uploaded'

    except Exception as e:
        return str(e)

##################### Ajout de parametres (POST) #########################
@app.route('/parametres', methods=['POST'])
def post_parametres():

    args = request.json

    try:
        col_ref = db.collection('parametres')
        col_ref.add(args)

        return 'Parametres_uploaded'

    except Exception as e:
        return str(e)

app.run(debug=True)

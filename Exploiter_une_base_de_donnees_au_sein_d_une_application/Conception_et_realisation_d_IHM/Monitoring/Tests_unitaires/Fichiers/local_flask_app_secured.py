import firebase_admin
from firebase_admin import credentials, firestore
from flask import jsonify, Flask, request
from flask_cors import CORS
from datetime import datetime, timedelta
import jwt



cred = credentials.Certificate(cred_json)
firebase_admin.initialize_app(cred)

db = firestore.client()

app = Flask(__name__)
CORS(app, origins='*', supports_credentials=True)

######################################################################
#############################   SECURE   #############################
######################################################################

SECRET_KEY = "Grogu"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60
USERS = {
    "Grogu": {
        "username": "Grogu",
        "password": "Grogu",
        "full_name": "The Child",
        "disabled": False,
    }
}

def create_access_token(username: str) -> str:
    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode = {"sub": username, "exp": expire}
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

    return encoded_jwt


@app.route("/login", methods=["POST"])
def login():
    form_data = {"username": request.json.get("username"), "password" : request.json.get("password")}

    if form_data["username"] not in USERS:
        return jsonify({"error": "Invalid username or password"}), 400
    
    user = USERS[form_data["username"]]

    if form_data["password"] != user["password"]:
        return jsonify({"error": "Invalid username or password"}), 400

    access_token = create_access_token(user["username"])

    return jsonify({"access_token": access_token, "token_type": "bearer"})

def test_token(token):

    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username = payload.get("sub")

        if username is None:
            return jsonify({"error": "Invalid authentication token"})
        
    except jwt.exceptions.DecodeError:
        return jsonify({"error": "Invalid authentication token"})
    
    except jwt.exceptions.ExpiredSignatureError:
        return jsonify({"error": "Expired authentication token"})

    if username not in USERS:
        return jsonify({"error": "User not found"})

    user = USERS[username]
    return user

#######################################################################
###############################   GET   ###############################
#######################################################################

##################### Index #########################
@app.route('/', methods=['GET'])
def index():
    token = request.json.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):
        return(
        """
        <h1 align="center">API du projet PubNoPub</h1>
        """
    )
        

    return user
    

##################### Tous les rapports (GET) #########################
@app.route('/allRapports', methods=['GET'])
def get_all_rapports():
    token = request.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):
        col_ref = db.collection("rapports")
        docs = col_ref.get()
        documents = []
        
        for doc in docs:

            doc = doc.to_dict()
            
            for key in doc:
                if isinstance(doc[key], firestore.DocumentReference):
                    doc[key] = doc[key].path
            
            documents.append(doc)
        if documents:
            return jsonify(documents)
        else:
            return jsonify({'error': 'Collection not found'})
    
    return user

##################### Dernier rapport (GET) #########################
@app.route('/dernierRapport', methods=['GET'])
def get_last_rapport():
    
    token = request.headers.get("Authorization")

    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):
        col_ref = db.collection("rapports")
        doc = col_ref.order_by('date_rapport', direction=firestore.Query.DESCENDING).get()
    
        if doc:

            doc = doc[0].to_dict()
            
            for key in doc:
                if isinstance(doc[key], firestore.DocumentReference):
                    doc[key] = doc[key].path
                

            return jsonify(doc)
        else:
            return jsonify({'error': 'Collection not found'})
    
    return user

##################### Infos du projet (dernière version) (GET) #########################
@app.route('/infos', methods=['GET'])
def get_infos():
    token = request.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):
        col_ref = db.collection("infos")
        doc = col_ref.order_by('date', direction=firestore.Query.DESCENDING).get()
    
        if doc:
            doc = doc[0].to_dict()
            return jsonify(doc)
        else:
            return jsonify({'error': 'Collection not found'})
    
    return user
    
##################### Dernier paramètres utilisés (GET) #########################
@app.route('/parametres', methods=['GET'])
def get_params():
    token = request.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):
        # Récupération de la réference dans dernierRapport
        last_rapport = get_last_rapport().get_json()
        param_ref = last_rapport["parametres"].split('/')[-1]

        doc_ref = db.collection("parametres").document(param_ref)
        doc = doc_ref.get()
    
        if doc:
            doc = doc.to_dict()
            return jsonify(doc)
        else:
            return jsonify({'error': 'Collection not found'})
    
    return user
    
##################### Plusieurs rapports avec arg (GET) #########################
@app.route('/rapports/<int:nb>', methods=['GET'])
def get_x_rapports(nb):
    token = request.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):
        col_ref = db.collection("rapports")
        docs = col_ref.order_by('date_rapport', direction=firestore.Query.DESCENDING).limit(nb).get()
        documents = []
        
        for doc in docs:

            doc = doc.to_dict()
            
            for key in doc:
                if isinstance(doc[key], firestore.DocumentReference):
                    doc[key] = doc[key].path
            
            documents.append(doc)
        if documents:
            return jsonify(documents)
        else:
            return jsonify({'error': 'Collection not found'})
    
    return user
    

#######################################################################
##############################   POST   ###############################
#######################################################################

##################### Ajout d'un rapport (POST) #########################
@app.route('/rapports', methods=['POST'])
def post_rapport():
    token = request.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):

        args = request.json

        try:
            args["date_rapport"] = datetime.strptime(args["date_rapport"], '%d-%m-%Y %H:%M:%S')
            args['parametres'] = db.collection('parametres').document(args['parametres'])
            col_ref = db.collection('rapports')
            col_ref.add(args)

            return 'Rapport_uploaded'

        except Exception as e:
            return str(e)
    
    return user


##################### Ajout d'infos (POST) #########################
@app.route('/infos', methods=['POST'])
def post_infos():

    token = request.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):

        args = request.json

        try:
            args["date"] = datetime.strptime(args["date"], '%d-%m-%Y %H:%M:%S')
            col_ref = db.collection('infos')
            col_ref.add(args)

            return 'Infos_uploaded'

        except Exception as e:
            return str(e)
        
    return user

##################### Ajout de parametres (POST) #########################
@app.route('/parametres', methods=['POST'])
def post_parametres():
    token = request.headers.get("Authorization")
    if not token:
        return jsonify({"error": "Missing authentication token"}), 401

    token = token.replace("Bearer ", "")
    user = test_token(token)

    if isinstance(user, dict):

        args = request.json

        try:
            col_ref = db.collection('parametres')
            col_ref.add(args)

            return 'Parametres_uploaded'

        except Exception as e:
            return str(e)
        
    return user

app.run(debug=True)

import azure.functions as func
import logging
import numpy as np
from keras.preprocessing import image
from keras.models import load_model
import json

CLASSES = {'CNV': 0, 'DME': 1, 'DRUSEN': 2, 'NORMAL': 3}

app = func.FunctionApp(http_auth_level=func.AuthLevel.FUNCTION)

def pred(images):
    CLASSES = {'CNV': 0, 'DME': 1, 'DRUSEN': 2, 'NORMAL': 3}

    model = load_model('./retinal-oct.h5')

    all_preds = {}
    for img in images:
        test_image = image.load_img(images[img], target_size = (224, 224))
        test_image = image.img_to_array(test_image)
        test_image = np.expand_dims(test_image, axis = 0)
        test_image = test_image / 255.0

        result = model.predict(test_image, verbose=0)
        pred = {}
        for i, key in enumerate(CLASSES):
            pred[key] = result[0][i]
        all_preds[img] = pred
    
    return all_preds
    

@app.route(route="pred")
def get_pred(req: func.HttpRequest) -> func.HttpResponse:
    logging.info('Python HTTP trigger function processed a request.')

    try:
        req_body = req.get_json()
        images = req_body.get('images')
    except Exception as e:
        logging.info(e)
        func.HttpResponse(e, status_code=400)
    
    if images:
        try:
            result = pred(images)
            func.HttpResponse(json.dumps(result), status_code=400)
        except Exception as e:
            logging.info(e)
            func.HttpResponse(e, status_code=400)
        



    else :
        return func.HttpResponse("Images manquantes", status_code=400)
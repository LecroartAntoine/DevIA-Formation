from PyQt5 import QtCore
import openai, time

######################### Thread Qt de traitement du texte par l'API openAI ###################################
class GPThread(QtCore.QThread):
    finished = QtCore.pyqtSignal(object) # Signal à envoyer quand le traitement est fini, ici un json.

    def __init__(self, token, query, sys_prompt, parent=None):
        super().__init__(parent) # initialisation du Thread
        self.query = query # Récupération de la requête textuelle
        self.sys_prompt = sys_prompt # Récupération du contexte
        self.start_time = time.time()
        self.token = token

    def run(self):

        openai.api_key = self.token
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo", # Sélection du modèle
            messages=[
                {
                    # On envoit un message sous le rôle "system" pour donner le contexte à l'IA.
                    # Ici, on explique qu'il doit créer un json contenant une requete SQL traduite de la demande textuelle, ainsi qu'un email s'il est spécifié.
                    "role" : "system", 
                    "content" : self.sys_prompt
                },
                {   
                    # On envoit un message sous le rôle "user" pour donner la demande utilisateur à l'IA.
                    "role" : "user",
                    "content" : self.query # Requête récupéré du QTextEdit
                }
            ],
        )

        self.finished.emit((response, time.time() - self.start_time)) # Renvoie de la réponse

        

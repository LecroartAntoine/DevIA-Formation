from PyQt5 import QtCore, QtGui, QtWidgets
import sys, os, Bar, AI_Thread, smtplib, datetime, json, con_diag, requests, opinion_diag, Speech_Thread
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 900)
        MainWindow.setWindowFlags(QtCore.Qt.CustomizeWindowHint | QtCore.Qt.FramelessWindowHint)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.main_layout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.main_layout.setObjectName("main_layout")

        self.main_layout.addWidget(Bar.MyBar(MainWindow))
        self.main_layout.setContentsMargins(0,0,0,0)

        self.app_manage_layout = QtWidgets.QHBoxLayout()
        self.app_manage_layout.setObjectName("app_manage_layout")

        self.separator = QtWidgets.QFrame()
        self.separator.setFrameShape(QtWidgets.QFrame.HLine)
        self.separator.setLineWidth(5)
        self.separator.setStyleSheet("color : rgba(243, 67, 105, 255);")
        self.main_layout.addWidget(self.separator)

        self.open_but = QtWidgets.QPushButton(self.centralwidget)
        self.open_but.setObjectName("open_but")
        self.open_but.setIcon(QtGui.QIcon("Assets:Open.png"))
        self.app_manage_layout.addWidget(self.open_but)
        self.app_manage_layout.addItem(spacerItem)

        self.table_select_icon = QtWidgets.QLabel(self.centralwidget)
        self.table_select_icon.setObjectName("table_select_icon")
        self.table_select_icon.setPixmap(QtGui.QPixmap("Assets:table.png").scaledToWidth(32))
        self.app_manage_layout.addWidget(self.table_select_icon)
        self.table_select_label = QtWidgets.QLabel(self.centralwidget)
        self.table_select_label.setObjectName("table_select_label")
        self.app_manage_layout.addWidget(self.table_select_label)
        self.table_select_box = QtWidgets.QComboBox(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        self.table_select_box.setSizePolicy(sizePolicy)
        self.table_select_box.setObjectName("table_select_box")
        self.app_manage_layout.addWidget(self.table_select_box)
        self.app_manage_layout.addItem(spacerItem)

        self.opinion_label = QtWidgets.QLabel(self.centralwidget)
        self.opinion_label.setObjectName("opinion_label")
        self.app_manage_layout.addWidget(self.opinion_label)

        self.opinion_happy_button = QtWidgets.QPushButton(self.centralwidget)
        self.opinion_happy_button.setObjectName("opinion_happy_button")
        self.opinion_happy_button.setIcon(QtGui.QIcon("Assets:happy.png"))
        self.app_manage_layout.addWidget(self.opinion_happy_button)

        self.opinion_neutral_button = QtWidgets.QPushButton(self.centralwidget)
        self.opinion_neutral_button.setObjectName("opinion_neutral_button")
        self.opinion_neutral_button.setIcon(QtGui.QIcon("Assets:neutral.png"))
        self.app_manage_layout.addWidget(self.opinion_neutral_button)

        self.opinion_sad_button = QtWidgets.QPushButton(self.centralwidget)
        self.opinion_sad_button.setObjectName("opinion_sad_button")
        self.opinion_sad_button.setIcon(QtGui.QIcon("Assets:sad.png"))
        self.app_manage_layout.addWidget(self.opinion_sad_button)

        self.app_manage_layout.setContentsMargins(5,0,5,0)
        self.main_layout.addLayout(self.app_manage_layout)

        self.separator_2 = QtWidgets.QFrame()
        self.separator_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.separator_2.setLineWidth(5)
        self.separator_2.setStyleSheet("color : rgba(63, 59, 146, 255);")
        self.main_layout.addWidget(self.separator_2)

        self.render_layout = QtWidgets.QHBoxLayout()
        self.render_layout.setObjectName("render_layout")
        self.render_view = QtWidgets.QTableWidget(self.centralwidget)
        self.render_view.setObjectName("render_view")
        self.render_layout.addWidget(self.render_view)
        self.render_text_layout = QtWidgets.QVBoxLayout()
        self.render_text_layout.setObjectName("render_text_layout")

        self.query_frame = QtWidgets.QFrame()
        self.query_frame.setFrameShape(QtWidgets.QFrame.Box)
        self.query_frame.setLineWidth(2)
        self.query_frame.setStyleSheet("QFrame{color : rgba(16, 163, 127, 255);}")

        self.query_layout = QtWidgets.QVBoxLayout(self.query_frame)
        self.query_layout.setObjectName("query_layout")

        self.query_title_layout = QtWidgets.QHBoxLayout()
        self.query_title_layout.setObjectName("query_title_layout")


        self.query_icon = QtWidgets.QLabel(self.centralwidget)
        self.query_icon.setObjectName("query_icon")
        self.query_icon.setPixmap(QtGui.QPixmap("Assets:GPT.png").scaledToHeight(40, QtCore.Qt.SmoothTransformation))
        self.query_title_layout.addWidget(self.query_icon)

        self.__ = QtWidgets.QLabel(self.centralwidget)
        self.__.setObjectName("__")
        self.query_title_layout.addWidget(self.__)

        self.query_label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        self.query_label.setSizePolicy(sizePolicy)
        self.query_label.setAlignment(QtCore.Qt.AlignLeft)
        self.query_label.setObjectName("query_label")
        self.query_title_layout.addWidget(self.query_label)

        self._ = QtWidgets.QLabel(self.centralwidget)
        self._.setObjectName("_")
        self.query_title_layout.addWidget(self._)

        self.voice_reco = QtWidgets.QPushButton(self.centralwidget)
        self.voice_reco.setObjectName("voice_reco")
        self.voice_reco.setIcon(QtGui.QIcon('Assets:microphone.png'))
        self.voice_reco.setFixedSize(QtCore.QSize(40, 40))
        self.voice_reco.setStyleSheet("""background-color: #16a27f;border-style: solid;border-width: 3px;border-radius: 8px;border-color: #16a27f;padding: 5px;}QPushButton::disabled{background-color: #242526;border-color: #121212;}QPushButton::hover{background-color: #19d5a6;border-style: solid;border-width: 3px;border-radius: 8px;border-color: #19d5a6;padding: 5px;}""")
        self.query_title_layout.addWidget(self.voice_reco)

        self.query_layout.addLayout(self.query_title_layout)

        self.query_edit = QtWidgets.QTextEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        self.query_edit.setSizePolicy(sizePolicy)
        self.query_edit.setObjectName("query_edit")
        self.query_layout.addWidget(self.query_edit)
        self.apply_query_but = QtWidgets.QPushButton(self.centralwidget)
        self.apply_query_but.setObjectName("apply_query_but")

        self.query_layout.addWidget(self.apply_query_but)
        self.render_text_layout.addWidget(self.query_frame)
        self.render_layout.addLayout(self.render_text_layout)

        self.render_layout.setContentsMargins(5,0,5,5)
        self.main_layout.addLayout(self.render_layout)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

############################### Connexion #################################
        self.open_but.clicked.connect(self.open)
        self.table_select_box.currentIndexChanged.connect(self.set_table)
        self.apply_query_but.clicked.connect(self.execute_GPT_query)
        # self.opinion_happy_button.clicked.connect(self.happy_comment)
        # self.opinion_sad_button.clicked.connect(self.sad_comment)
        # self.opinion_neutral_button.clicked.connect(self.neutral_comment)
        self.voice_reco.clicked.connect(self.speech_recognition)

############################### Buttons param ##############################
        self.table_select_box.setEnabled(False)
        self.query_edit.setEnabled(False)
        self.apply_query_but.setEnabled(False)
        self.opinion_happy_button.setEnabled(False)
        self.opinion_sad_button.setEnabled(False)
        self.opinion_neutral_button.setEnabled(False)
        # self.voice_reco.setEnabled(False)

        self.token = ""

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ChatBDD"))
        self.table_select_label.setText(_translate("MainWindow", "Table"))
        self.query_label.setText(_translate("MainWindow", "RequÃªte GPT"))
        self.apply_query_but.setText(_translate("MainWindow", "Appliquer"))
        self.open_but.setText(_translate("MainWindow", "Connexion"))
        self.opinion_label.setText(_translate("MainWindow", "Envoyer un avis :"))

    def open(self):
        self.table_select_box.setEnabled(False)
        self.query_edit.setEnabled(False)
        self.apply_query_but.setEnabled(False)
        self.opinion_happy_button.setEnabled(False)
        self.opinion_sad_button.setEnabled(False)
        self.opinion_neutral_button.setEnabled(False)
        # self.voice_reco.setEnabled(False)

        self.table_select_box.clear()
        self.query_edit.clear()

        dialog = con_diag.DatabaseConnectionDialog()
        result = dialog.exec_() 

        if result == QtWidgets.QDialog.Accepted:
            self.connect_to_database(*dialog.get_connection_info())

    def connect_to_database(self, username, password, database):
        self.session = requests.Session()
        self.session.trust_env = False

        self.username = username
        self.password = password
        self.database = database
        self.init_db()

    def init_db(self):
        
        data = {
            "database" : self.database,
            "username" : self.username,
            "password" : self.password 
        }
        table_name_response = self.session.post("https://antoine-api.azurewebsites.net/api/context", json=data)

        table_name_result, error = table_name_response.json()["Tables"], table_name_response.json()["error"]

        if table_name_result : 
            self.table_select_box.setEnabled(True)
            self.query_edit.setEnabled(True)
            self.apply_query_but.setEnabled(True)
            self.opinion_happy_button.setEnabled(True)
            self.opinion_sad_button.setEnabled(True)
            self.opinion_neutral_button.setEnabled(True)
            self.voice_reco.setEnabled(True)

            self.table_select_box.addItems(table_name_result)
            
        else:
            self.error_message(error)


                
    def executeSQL(self, query):
        print(query)
        try:
            data = {
                    "query" : query,
                    "database" : self.database,
                    "username" : self.username,
                    "password" : self.password 
                }
            response = self.session.post("https://antoine-api.azurewebsites.net/api/query", json=data)

            result, error = response.json()["Query_result"], response.json()["error"]
            if result:
                self.displayResults(result) 
            elif error:
                self.error_message(error)

        except Exception as e:
            self.error_message(e)
        
        self.resize_headers

    def displayResults(self, result):
        self.render_view.clear()
        self.render_view.setRowCount(len(result)-1)
        if len(result) > 0:
            column_names = result[0]
            self.render_view.setColumnCount(len(column_names))
            self.render_view.setHorizontalHeaderLabels(column_names)

            for row_index, row_data in enumerate(result[1:]):
                for col_index, cell_data in enumerate(row_data):
                    item = QtWidgets.QTableWidgetItem(str(cell_data))
                    self.render_view.setItem(row_index, col_index, item)
            
            self.resize_headers()
    
    def set_table(self):
        self.executeSQL(f"SELECT * FROM {self.table_select_box.currentText()};")

    def execute_GPT_query(self):
        progress_dialog = QtWidgets.QProgressDialog('Traitement en cours, patientez ...', None, 0, 0, MainWindow)
        progress_dialog.setWindowModality(QtCore.Qt.WindowModal)
        progress_dialog.setWindowTitle('AI Assistant')
        progress_dialog.show()

        self.worker = AI_Thread.GPThread(self.token, self.query_edit.toPlainText(), self.sys_prompt)

        self.worker.finished.connect(self.setQuery)
        self.worker.finished.connect(progress_dialog.close)
        self.worker.start()

    def setQuery(self, response):

        self.response = response[0]

        try :
            self.result = json.loads(self.response["choices"][0]["message"]["content"])

        except Exception as e:
            self.error_message(e)


        try:
           self.executeSQL(self.result['response'])
        except Exception as e:
            self.error_message(e)


        if self.render_view.rowCount() == 0:

            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Warning)
            msg.setText("Aucun rÃ©sultat")
            msg.setWindowTitle("Erreur")
            msg.exec_()

            self.executeSQL(f"SELECT * FROM {self.table_select_box.currentText()}")

        self.resize_headers()

################ Traitement textuel du rÃ©sultat #####################
        columns = []
        for i in range(self.render_view.columnCount()):
            item = self.render_view.horizontalHeaderItem(i)
            if item is not None:
                columns.append(item.text())
            else:
                pass


    def resize_headers(self):
         
         for column in range(self.render_view.columnCount()):
            self.render_view.horizontalHeader().resizeSection(column, self.render_view.horizontalHeader().sectionSizeHint(column))
    
    def error_message(self, content):

        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Warning)
        msg.setText(f"Erreur : {content}")
        msg.setWindowTitle("Erreur")
        msg.exec_()

    def speech_recognition(self):
        self.progress_dialog = QtWidgets.QProgressDialog('Je vous Ã©coute.', None, 0, 0, MainWindow)
        self.progress_dialog.setWindowModality(QtCore.Qt.WindowModal)
        self.progress_dialog.setWindowTitle('AI Assistant')
        self.progress_dialog.show()
        self.worker = Speech_Thread.SpeechThread()

        self.worker.finished.connect(self.set_speech_text)
        self.worker.finished.connect(self.progress_dialog.close)
        self.worker.start()
    
    def set_speech_text(self, text):
        self.query_edit.setText(text)
        self.execute_GPT_query()


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)

    QtCore.QDir.addSearchPath('Assets', os.path.join(os.path.dirname(os.path.abspath(__file__)), 'Assets'))

    app.setWindowIcon(QtGui.QIcon("Assets:Logo.png"))
    file = QtCore.QFile('Assets:Style.qss')
    file.open(QtCore.QFile.ReadOnly | QtCore.QFile.Text)
    app.setStyleSheet(str(file.readAll(), 'utf-8'))

    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
